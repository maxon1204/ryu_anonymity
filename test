from mininet.topo import Topo
from mininet.net import Mininet
from mininet.util import dumpNodeConnections
from mininet.log import setLogLevel
from mininet.node import  Ryu, RemoteController
from mininet.cli import CLI
import sys
#import ryu
from os import environ


#RYUDIR = environ['HOME'] + '/ryu/ryu/app/'
#print(RYUDIR)

class Controller(Ryu):
    def __init__(self, port=6653):
        print("Creat")
        args = '--observe-links --verbose --log-file /home/maxim/zxcvbn.txt'
        app = 'ryu.app.simple_switch_13 ryu.app.gui_topology.gui_topology'
        ryu_args = args + ' ' + app
        Ryu.__init__(self, 'ryu', ryu_args, port=port)
        #self.url = 'http://localhost:%d' % 8080


res = 0

class linear(Topo):
    def build(self, n=1):
        switch = self.addSwitch('s1')
        for h in range(1,n):
            host = self.addHost('h%s' % (h))
            switch1 = self.addSwitch('s%s' % (h + 1))
            self.addLink(host, switch)
            self.addLink(switch, switch1)
            switch, switch1 = switch1, switch

def Test(var):
    global res
    controller = Controller()
    topo = linear(var)
    net = Mininet(topo=topo, controller=RemoteController(controller.name, port=6653))
    #net = Mininet(topo=topo)
    net.start()
    print("Dumping host connections")
    dumpNodeConnections(net.hosts)
    print("Testing network connectivity")
    net.pingAll()
    #CLI(net)
    net.stop()
    #controller.stop()
    #print("mod = ", mod)

if __name__ == '__main__':
    setLogLevel('debug')
    var = 5
    #for var in range(10, 15, 1):
    Test(var)
    print("res = ", res)
